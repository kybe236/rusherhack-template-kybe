name: Build and Release

on:
  push:
    branches:
      - master
      - main

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21 for x64
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          architecture: x64

      - name: Clean directory
        run: ./gradlew clean

      - name: Build with Gradle
        run: ./gradlew build --scan

      - name: Upload *.jar as Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: jar
          path: ./build/lib/*

      - name: Generate Tag Name
        id: tag_name
        run: |
          tag=$(date +"%d/%m/%y-%H/%M")
          echo "TAG_NAME=$tag" >> $GITHUB_ENV

      - name: Create tag
        uses: actions/github-script@v5
        if: success()
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ env.TAG_NAME }}',
              sha: context.sha
            })

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: success()
        with:
          files: |
            ./build/libs/*.jar
          tag_name: ${{ env.TAG_NAME }}
          name: ${{ env.TAG_NAME }}
          body: |
            Automated release for ${{ env.TAG_NAME }}

      - name: Get Release Info
        id: release_info
        run: |
          release_data=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.TAG_NAME }}")
          download_url=$(echo "$release_data" | jq -r '.assets[0].browser_download_url')
          echo "DOWNLOAD_URL=$download_url" >> $GITHUB_ENV

      - name: Update README.md
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACT_ID: ${{ steps.upload.outputs.artifact-id }}
        run: |
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ env.ARTIFACT_ID }}"
          sed -i.bak -E "s|\[LATEST DOWNLOAD\]\(.*\)|\[LATEST DOWNLOAD\]\($DOWNLOAD_URL\)|" README.md
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add README.md
          git commit -m "Update README.md with latest download links"
          git push